/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   libpipex.h                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dzuiev <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/19 20:10:17 by dzuiev            #+#    #+#             */
/*   Updated: 2024/03/06 07:03:01 by dzuiev           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*                                                                            */
/*                           Заголовочный файл Libpipex                       */
/*                                                                            */
/*    Libpipex - это библиотека для проекта Pipex, которая содержит           */
/*    прототипы функций и определения структур, используемых для выполнения   */
/*    задачи создания пайплайна команд в среде UNIX. Этот файл служит         */
/*    центральным местом для объявления всех необходимых функций и структур,  */
/*    что облегчает их доступность и управление в различных частях проекта.   */
/*                                                                            */
/* ************************************************************************** */

#ifndef LIBPIPEX_H
# define LIBPIPEX_H

# include <unistd.h>
# include <stdlib.h>
# include <fcntl.h>
# include <sys/wait.h>
# include <stdio.h>
# include <errno.h>
# include <string.h>

/* ************************************************************************** */
/*                                                                            */
/*    Для использования функций из Libft необходимо включить                  */
/*    заголовочный файл "../libft/libft.h".                                   */
/*                                                                            */
/* ************************************************************************** */

# include "../libft/libft.h"

/* ************************************************************************** */
/*                                                                            */
/*    Структура `s_pipex` содержит все необходимые данные для выполнения      */
/*    программы pipex, включая флаги, дескрипторы файлов, количество команд,  */
/*    количество пайпов, массивы пайпов и PIDов, массив команд и их арг-тов,  */
/*    массив переменных окружения и пути к исполняемому файлу.                */
/*                                                                            */
/*    Структура содержит следующие поля:                                      */
/*    - `flag_here_doc`: флаг here_doc, позволяющий определить, используется  */
/*      ли here_doc для ввода данных.                                         */
/*    - `infile_fd`: дескриптор входного файла.                               */
/*    - `outfile_fd`: дескриптор выходного файла.                             */
/*    - `num_cmds`: количество команд в пайплайне.                            */
/*    - `num_pipes`: количество пайпов в пайплайне.                           */
/*    - `pipes`: двумерный массив для хранения пайпов.                        */
/*    - `pid`: массив идентификаторов процессов.                              */
/*    - `cmds`: массив команд, переданных в аргументах.                       */
/*    - `my_cmd`: двумерный массив для хранения команд и их аргументов.       */
/*    - `envp`: массив переменных окружения.                                  */
/*    - `my_path`: путь к исполняемому файлу.                                 */
/*    - `path`: путь к переменной окружения `PATH`.                           */
/*    - `outfile_name`: имя выходного файла.                                  */
/*                                                                            */
/* ************************************************************************** */
typedef struct s_pipex
{
	int		flag_here_doc;
	int		infile_fd;
	int		outfile_fd;
	int		num_cmds;
	int		num_pipes;
	int		**pipes;
	pid_t	*pid;
	char	**cmds;
	char	***my_cmd;
	char	**envp;
	char	*my_path;
	char	*path;
	char	*outfile_name;
}				t_pipex;

/* ************************************************************************** */
/*                                                                            */
/*    Функции:                                                                */
/*    - `open_file` открывает файлы для ввода/вывода с учетом флагов.         */
/*    - `input_validation` проверяет входные данные на валидность.            */
/*    - `init_pipex` инициализирует структуру `s_pipex`, подготавливая все    */
/*      необходимые данные для запуска пайплайна.                             */
/*    - `ft_free_array` и `ft_free_3d_array` освобождают выделенную память.   */
/*    - `cleanup` выполняет очистку ресурсов перед выходом из программы.      */
/*    - `ft_clean_pipes` закрывает и освобождает пайпы.                       */
/*    - `launch_processes` запускает команды в пайплайне.                     */
/*    - `t_pipex_zero` инициализирует структуру `s_pipex` нулевыми значениями.*/
/*    - `allocate_pid` выделяет память под массив PIDов.                      */
/*    - `get_env` и `get_path` получают пути окружения и конкретной команды.  */
/*                                                                            */
/* ************************************************************************** */

int		open_file(char *file, int flag);
int		input_validation(t_pipex *pipex, int i);
void	init_pipex(t_pipex *pipex, int argc, char **argv, char **envp);
void	ft_free_array(char ***array);
void	ft_free_3d_array(char ****array);
void	cleanup(t_pipex *pipex, int exit_status);
void	ft_clean_pipes(int ***pipes, int num_pipes);
void	launch_processes(t_pipex *pipex);
void	t_pipex_zero(t_pipex *pipex);
pid_t	*allocate_pid(t_pipex *pipex);
char	*get_env(char **envp);
char	*get_path(char *cmd, char *path);

#endif
